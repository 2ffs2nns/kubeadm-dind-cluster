#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail
set -o errtrace

function snapshot::prepare {
  if [[ -f /etc/kubernetes/manifests/kube-controller-manager.json || -f /etc/kubernetes/manifests/kube-controller-manager.yaml ]]; then
    # remove kube-dns RS to make sure updated one is used
    kubectl delete rs -n kube-system -l k8s-app=kube-dns

    mkdir /manifests.bak
    # stop controller manager so it doesn't launch new pods
    mv /etc/kubernetes/manifests/kube-controller-manager.* /manifests.bak/
    while kubectl get pod kube-controller-manager-kube-master -n kube-system -o name 2>/dev/null | grep -q pod/; do
      sleep 0.3
    done
    # delete k8s component and dashboard pods so they don't "blink" after cluster restart
    kubectl delete pod --now -l k8s-app=kube-proxy -n kube-system 2>/dev/null
    kubectl delete pod --now -l k8s-app=kube-dns -n kube-system 2>/dev/null
    kubectl delete pod --now -l app=kubernetes-dashboard -n kube-system 2>/dev/null
    while kubectl get pods -n kube-system -o name | egrep -q '^pod/(kube-proxy-|kube-dns-|kubernetes-dashboard-)'; do
      sleep 0.3
    done
    kubectl get pods -n kube-system
    systemctl stop kubelet docker
    # now it's safe to put back the manifest
    mv /manifests.bak/* /etc/kubernetes/manifests/
    rmdir /manifests.bak
  else
    systemctl stop kubelet docker
  fi
}

function snapshot::save {
  # the scripts expects output the output of 'docker diff' as input
  grep -v '^D ' |
    sed 's@^. /@@' |
    egrep -v '^(tmp|var/lib/kubelet|var/log|etc/mtab)' |
    while read path; do
      if [[ ! -d ${path} || ${path} =~ ^var/lib/etcd/.*/snap$ ]]; then
        echo "${path}"
      fi
    done |
    tar -C / -cf /dind/snapshot.tar -T -
  systemctl start kubelet docker
}

function snapshot::restore {
  tar -C / -xf /dind/snapshot.tar
  if [[ ${1:-} = "-u" ]]; then
    wrapkubeadm ensure-binaries
  fi
  start_services docker kubelet
}

case "${1:-}" in
  prepare)
    snapshot::prepare
    ;;
  save)
    snapshot::save
    ;;
  restore)
    snapshot::restore
    ;;
  update_and_restore)
    snapshot::restore -u
    ;;
  *)
    echo "usage:" >&2
    echo "  $0 save" >&2
    echo "  $0 restore" >&2
    exit 1
    ;;
esac
