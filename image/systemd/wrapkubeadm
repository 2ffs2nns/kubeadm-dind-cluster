#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail
set -o errtrace

docker_net_opts=

# Bridge the containerized docker network to the host docker network.
# To enable this bridge, specify an IP offset for this container to use.
# Other containers on the same host should have different offsets
# such that the IPs within the range (offset <-> offset + size - 1) do not overlap.
if [ ! -z "${DOCKER_NETWORK_OFFSET:-}" ]; then
  # create docker0 bridge manually and attach it to the veth interface eth0
  brctl addbr docker0
  brctl addif docker0 eth0
  ip link set docker0 up

  # move ip to the bridge and restore routing via the old gateway
  IP_CIDR=$(ip addr show eth0 | grep -w inet | awk '{ print $2; }')
  IP=$(echo $IP_CIDR | sed 's,/.*,,')
  NETWORK_SIZE=$(echo $IP_CIDR | sed 's,.*/,,')
  DEFAULT_ROUTE=$(ip route | grep default | sed 's/eth0/docker0/')

  ip addr del $IP_CIDR dev eth0
  ip addr add $IP_CIDR dev docker0
  ip route add $DEFAULT_ROUTE

  # compute a network for the containers to live in
  # by adding DOCKER_NETWORK_OFFSET to the current IP and cutting off
  # non-network bits according to DOCKER_NETWORK_SIZE
  DOCKER_NETWORK_SIZE=${DOCKER_NETWORK_SIZE:-24}
  NETWORK=$(ip route | grep docker0 | grep -v default | sed 's,/.*,,')

  IFS=. read -r i1 i2 i3 i4 <<< $IP
  IFS=. read -r n1 n2 n3 n4 <<< $NETWORK
  IFS=. read -r o1 o2 o3 o4 <<< $DOCKER_NETWORK_OFFSET
  IFS=. read -r w1 w2 w3 w4 <<< $(ipcalc $IP_CIDR | grep Wildcard | awk '{print $2;}')

  IP_PLUS_OFFSET=$(printf "%d.%d.%d.%d\n" \
    "$(( n1 + ((i1 - n1 + o1) & w1) ))" \
    "$(( n2 + ((i2 - n2 + o2) & w2) ))" \
    "$(( n3 + ((i3 - n3 + o3) & w3) ))" \
    "$(( n4 + ((i4 - n4 + o4) & w4) ))")

  FIXED_CIDR=$(ipcalc $IP_PLUS_OFFSET/$DOCKER_NETWORK_SIZE | grep Network | awk '{print $2;}')
  echo "Using network $FIXED_CIDR for docker containers"

  # let docker reuse the given IP. If you run more than one dind slave, add
  # --fixed-cidr=a.b.c.d/24 to docker options with disjunct networks.
  docker_net_opts="${docker_net_opts} --bip=${IP_CIDR} --fixed-cidr=${FIXED_CIDR}"

  # delete incompatible network settings
  rm -rf "/var/lib/docker/network"
fi

hostname_override="$(getent hosts $(hostname) | cut -d' ' -f1 | sort -u | tail -1)"
if [[ "${docker_net_opts}" ]]; then
  echo -e "[Service]\nEnvironment='DOCKER_EXTRA_OPTS=${docker_net_opts}'" \
          >/etc/systemd/system/docker.service.d/00-dind-net.conf

  # This ensures that node names are IPs so we don't need dnsmasq
  # FIXME: put proper dns / domain from config.sh there (KUBELET_DNS_ARGS)
  kubelet_extra_conf=/etc/systemd/system/kubelet.service.d/20-hostname-override.conf
  mkdir -p "$(dirname "${kubelet_extra_conf}")"
  cat >"${kubelet_extra_conf}" <<EOF
[Service]
Environment='KUBELET_EXTRA_ARGS=--hostname-override=${hostname_override} --v=4'
EOF
fi

start_services docker kubelet
systemctl enable docker kubelet

# start kubeadm init
KUBE_HYPERKUBE_IMAGE=${HYPERKUBE_IMAGE} kubeadm "$@"

if [ "${1:-}" = "init" ]; then
  # Trying to change conntrack settings fails even in priveleged containers,
  # so we need to avoid it. Here's sample error message from kube-proxy:
  # I1010 21:53:00.525940       1 conntrack.go:57] Setting conntrack hashsize to 49152
  # Error: write /sys/module/nf_conntrack/parameters/hashsize: operation not supported
  # write /sys/module/nf_conntrack/parameters/hashsize: operation not supported
  #
  # Recipe by @errordeveloper:
  # https://github.com/kubernetes/kubernetes/pull/34522#issuecomment-253248985
  # TODO: use proxy flags for kubeadm when/if #34522 is merged
  cluster_cidr="$(ip addr show docker0 | grep -w inet | awk '{ print $2; }')"
  kubectl -n kube-system get ds -l "component=kube-proxy" -o json |
    jq ".items[0].spec.template.spec.containers[0].command |= .+ [\"--hostname-override=${hostname_override}\", \"--cluster-cidr=${cluster_cidr}\", \"--masquerade-all\", \"--conntrack-max=0\", \"--conntrack-max-per-core=0\"]" |
    kubectl apply -f - && kubectl -n kube-system delete pods -l "component=kube-proxy"
  apiserver_conf="/etc/kubernetes/manifests/kube-apiserver.json"
  if [ -f "$apiserver_conf" ]; then
    # Make apiserver listen on 0.0.0.0 in the outer container.
    # Also, enable StreamingProxyRedirects feature gate for CRI testing.
    content="$(jq '.spec.containers[0].command|=map(select(startswith("--insecure-bind-address=")|not))+["--insecure-bind-address=0.0.0.0","--feature-gates=StreamingProxyRedirects=true"]' "${apiserver_conf}")"
    echo "$content" >"${apiserver_conf}"
  fi
fi
